use aves;
use aves.reflection;

namespace testing.unit;

/// Summary: The abstract base class for test fixtures. Classes derived from TestFixture
///          can be run as part of a unit test suite. All parameterless functions whose
///          names start with `test_` are considered test cases, and are run when the
///          {run} or {runAll} method is invoked.
public abstract class TestFixture
{
	/// Summary: Initializes the test fixture with no name.
	public new()
	{
		new this(null);
	}
	/// Summary: Initializes the test fixture with the specified name.
	/// Param name: A display name that summarises the tests in the fixture.
	public new(name)
	{
		_name = string(name ?? defaultName);
	}

	private _name;
	/// Summary: Gets a display name that summarises the tests in the fixture.
	public get name = _name;

	/// Summary: When overridden in a derived class, provides a setup routine
	///          that is called before each test case.
	public overridable setUp() { }

	/// Summary: When overridden in a derived class, provides a teardown routine
	///          that is called after each run test, even if the test fails.
	public overridable tearDown() { }

	/// Summary: Runs all tests fixtures in the specified module. The result of
	///          the test run is printed to the console.
	/// Param module: The module to run tests for. (aves.reflection.Module)
	/// Throws ArgumentNullError:
	///          {module} is null.
	/// Throws ArgumentError:
	///          {module} is not an {aves.reflection.Module}.
	public static runAll(module)
	{
		if module is null:
			throw new ArgumentNullError("module");
		if module is not Module:
			throw new ArgumentError("module must be an aves.reflection.Module.", "module");

		var runner = new TestRunner();
		var printer = new TestResultPrinter();

		var results = runner.runAllInModule(module);
		printer.printResults(results);
	}

	// The default name for a test fixture initialized without a name.
	private const defaultName = "(Unnamed test fixture)";
}
