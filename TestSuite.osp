use namespace aves;
use namespace aves.reflection;
use MSF = aves.reflection.MemberSearchFlags;

namespace testing.unit;

public abstract class TestSuite
{
	/// Summary: Initializes the test suite with no name.
	public new()
	{
		new this(null);
	}
	/// Summary: Initializes the test suite with the specified name.
	/// Param name: A display name that summarises the tests in the suite.
	public new(name)
	{
		_name = name?.toString() ?? defaultName;
	}

	private _name;
	/// Summary: Gets a display name that summarises the tests in the suite.
	public get name = _name;

	public overridable setUp() { }

	public overridable tearDown() { }

	public run()
	{
		return run(false);
	}
	public run(silent)
	{
		var failedTests = [];
		runInternal(failedTests, silent);
		if not silent:
			printFailedTests(failedTests, false);
		return failedTests;
	}

	private runInternal(failedTests, silent)
	{
		if not silent:
			print(">> " :: name);

		// Run all public instance methods whose names begin with "test_",
		// with zero arguments.
		var i = 0;
		try
		{
			setUp();

			var type = typeof(this);
			for method in type.getMethods(MSF.isPublic | MSF.isInstance):
				if method.name.startsWith(namePrefix)
				{
					var err = runSingleTest(method);
					if err:
						failedTests.add([i, method.name.substr(namePrefix.length), err, this]);
					if not silent:
						if err
						{
							Console.textColor = ConsoleColor.red;
							Console.write("F");
						}
						else
						{
							Console.textColor = ConsoleColor.green;
							Console.write(".");
						}
					i += 1;
				}
		}
		finally
		{
			if not silent:
				Console.resetColors();

			tearDown();
		}
		if not silent:
			Console.writeLine();
	}

	private runSingleTest(method)
	{
		try
		{
			// Call on this with zero arguments
			method.invoke(this, null);
		}
		catch Error in e
		{
			// Assertion errors are filtered out later
			return e;
		}
		return null; // no error
	}

	public static runAll(module)
	{
		if module is not Module:
			throw new TypeError("module must be an aves.reflection.Module.");

		var failedTests = [];

		var testSuiteType = typeof(TestSuite);
		for type in module.getTypes(MSF.isPublic | MSF.isStatic):
			if type.inheritsFrom(testSuiteType)
			{
				var suite = type.createInstance(null);
				suite.runInternal(failedTests, false);
			}

		printFailedTests(failedTests, true);
	}

	private static printFailedTests(failedTests, includeSuite)
	{
		if not failedTests.isEmpty
		{
			print("\nFailed tests:");
			for index, name, error, suite in failedTests
			{
				var msg = error.message;
				if error is not AssertionError:
					msg = typeof(error).fullName :: ": " :: msg;
				print(includeSuite ? failedTestWithSuiteFormat : failedTestFormat,
					[index, name, msg, error.stackTrace, suite.name]);
			}
		}
	}

	private const defaultName = "(unnamed)";
	private const namePrefix = "test_";
	private const failedTestFormat = "[{0}: {1}] {2}\n{3}";
	private const failedTestWithSuiteFormat = "[{4} #{0}: {1}] {2}\n{3}";
}