use aves.*;
use aves.reflection.Type;

namespace testing.unit;

public static class Assert
{
	/// Summary: Verifies that the specified value is true.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value} is a falsy value.
	public static isTrue(value, message = null)
	{
		if not value {
			throw new AssertionError(AssertionMessages.expectedTrue(value, message));
		}
		return true;
	}

	/// Summary: Verifies that the specified value is false.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value} is a truthy value.
	public static isFalse(value, message = null)
	{
		if value {
			throw new AssertionError(AssertionMessages.expectedFalse(value, message));
		}
		return true;
	}

	/// Summary: Verifies that the specified value is null.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value} is not null.
	public static isNull(value, message = null)
	{
		if value is not null {
			throw new AssertionError(AssertionMessages.expectedNull(value, message));
		}
		return true;
	}

	/// Summary: Verifies that the specified value is not null.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value} is null.
	public static isNotNull(value, message = null)
	{
		if value is null {
			throw new AssertionError(AssertionMessages.expectedNonNull(value, message));
		}
		return true;
	}

	/// Summary: Verifies that the specified collection is empty. A collection is
	///          considered to be empty if its `length` property is equal to the
	///          Int, UInt or Real value 0.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value}’s `length` property did not return zero.
	/// Remarks: This method is usable with all standard collection types, such as
	///          {List}, {Hash}, {Set} and {String}. Note that {Buffer} has a `size`
	///          property instead of `length`, and cannot be used with this method.
	public static isEmpty(value, message = null)
	{
		if value.length != 0 {
			throw new AssertionError(AssertionMessages.expectedEmptyCollection(value, message));
		}
	}

	/// Summary: Verifies that the specified collection is not empty. A collection
	///          is considered to be empty if its `length` property is equal to the
	///          Int, UInt or Real value 0.
	/// Param value: The value to test.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {value}’s `length` property returned zero.
	/// Remarks: This method is usable with all standard collection types, such as
	///          {List}, {Hash}, {Set} and {String}. Note that {Buffer} has a `size`
	///          property instead of `length`, and cannot be used with this method.
	public static isNotEmpty(value, message = null)
	{
		if value.length == 0 {
			throw new AssertionError(AssertionMessages.expectedNonEmptyCollection(value, message));
		}
	}

	/// Summary: Verifies that the specified value is of the specified type.
	/// Param value: The value to test.
	/// Param type: The type that {value} has to be of. (aves.reflection.Type)
	/// Returns: True if the assertion succeeds.
	/// Throws ArgumentTypeError:
	///          {type} is not an instance of {aves.reflection.Type}.
	/// Throws AssertionError:
	///          {value} is not an instance of the type represented by {type}.
	public static isOfType(value, type, message = null)
	{
		if type is not Type {
			throw new ArgumentTypeError("type", typeof(Type));
		}

		if not typeof(value).inheritsFrom(type) {
			throw new AssertionError(AssertionMessages.expectedValueOfType(value, type, message));
		}

		return true;
	}

	/// Summary: Verifies that the specified function or callback throws an error
	///          of the specified type.
	/// Param type: The error type that should be thrown. (aves.reflection.Type)
	/// Param func: An invokable value that is called with zero arguments. The
	///             return value is ignored.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: The error that was thrown, for further inspection if necessary.
	/// Throws ArgumentTypeError:
	///          {type} is not an instance of {aves.reflection.Type}.
	/// Throws ArgumentError:
	///          {type} does not represent a type derived from {aves.Error}.
	/// Throws ArgumentNullError:
	///          {func} is null.
	/// Throws AssertionError:
	///          {func} did not throw an error when invoked with zero arguments, or did not
	///          throw an error of the type {type}.
	/// Remarks: If {func} throws an {AssertionError}, it is passed to the caller of this
	///          method with no modification.
	public static throws(type, func, message = null)
	{
		if type is not Type {
			throw new ArgumentTypeError("type", typeof(Type));
		}
		if not type.inheritsFrom(typeof(Error)) {
			throw new ArgumentError("type must represent aves.Error or a type derived from it.", "type");
		}
		if func is null {
			throw new ArgumentNullError("func");
		}

		var error = null;
		try {
			func();
		}
		catch AssertionError {
			throw; // Always pass on assertion errors
		}
		catch Error in e {
			error = e;
		}

		if error is null {
			throw new AssertionError(
				AssertionMessages.expectedThrow(type, message),
				error // innerError
			);
		}
		else if not type.isInstance(error) {
			throw new AssertionError(
				AssertionMessages.expectedThrowOtherType(type, error, message),
				error // innerError
			);
		}
		return error;
	}

	/// Summary: Verifies that the specified function or callback does not throw
	///          an error.
	/// Param func: An invokable value that is called with zero arguments. The
	///             return value is ignored.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws ArgumentNullError:
	///          {func} is null.
	/// Throws AssertionError:
	///          {func} threw an error when invoked with zero arguments.
	/// Remarks: If {func} throws an {AssertionError}, it is passed to the caller of this
	///          method with no modification.
	public static doesNotThrow(func, message = null)
	{
		if func is null {
			throw new ArgumentNullError("func");
		}

		var error = null;
		try {
			func();
		}
		catch AssertionError {
			throw; // Always pass on assertion errors
		}
		catch Error in e {
			error = e;
		}

		if error is not null {
			throw new AssertionError(
				AssertionMessages.expectedNotToThrow(error, message),
				error // innerError
			);
		}
		return true;
	}

	/// Summary: Verifies that two values are equal. The two values are considered equal
	///          if {actual}’s operator `==` returns true.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected to equal.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not equal to {expected} according to the `==` operator.
	public static areEqual(actual, expected, message = null)
	{
		if actual != expected {
			throw new AssertionError(AssertionMessages.expectedEqual(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that two values are not equal. The two values are considered
	///          inequal if {actual}’s operator `==` returns false.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected not to equal.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is equal to {expected} according to the `==` operator.
	public static areNotEqual(actual, expected, message = null)
	{
		if actual == expected {
			throw new AssertionError(AssertionMessages.expectedNotEqual(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that two values are the same reference, as determined by the
	///          `refeq` operator.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected to reference.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not the same reference as {expected}.
	public static areSameRef(actual, expected, message = null)
	{
		if actual not refeq expected {
			throw new AssertionError(AssertionMessages.expectedSameRef(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that two values are difference references, as determined by the
	///          `refeq` operator.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected to differ from.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is the same reference as {expected}.
	public static areNotSameRef(actual, expected, message = null)
	{
		if actual refeq expected {
			throw new AssertionError(AssertionMessages.expectedNotSameRef(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that the actual value is less than the expected value. The value
	///          is considered less if {actual}’s operator `<=>` returns less than zero.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected be less than.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not less than {expected}.
	public static isLess(actual, expected, message = null)
	{
		if not (actual < expected) {
			throw new AssertionError(AssertionMessages.expectedLess(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that the actual value is less than or equal to the expected value.
	///          The value is considered less or equal if {actual}’s operator `<=>` returns
	///          a value less than or equal to zero.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected be less than or equal to.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not less than nor equal to {expected}.
	public static isLessOrEqual(actual, expected, message = null)
	{
		if not (actual <= expected) {
			throw new AssertionError(AssertionMessages.expectedLessOrEqual(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that the actual value is greater than the expected value. The value
	///          is considered greater if {actual}’s operator `<=>` returns greater than zero.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected be greater than.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not greater than {expected}.
	public static isGreater(actual, expected, message = null)
	{
		if not (actual > expected) {
			throw new AssertionError(AssertionMessages.expectedGreater(actual, expected, message));
		}
		return true;
	}

	/// Summary: Verifies that the actual value is greater than or equal to the expected value.
	///          The value is considered greater or equal if {actual}’s operator `<=>` returns
	///          a value greater than or equal to zero.
	/// Param actual:   The actual value.
	/// Param expected: The value that {actual} is expected be greater than or equal to.
	/// Param message:  (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          {actual} is not greater than nor equal to {expected}.
	public static isGreaterOrEqual(actual, expected, message = null)
	{
		if not (actual >= expected) {
			throw new AssertionError(AssertionMessages.expectedGreaterOrEqual(actual, expected, message));
		}
		return true;
	}

	/// Summary: Compares each item from a collection with each corresponding item from another
	///          collection, using the specified comparer callback. The collections must have the
	///          same length, and the predicate must return a truthy value for each pair of values,
	///          otherwise the assertion fails.
	/// Param first: The first collection to compare. This value must implement a finite iterator.
	/// Param second: The second collection to compare. This value must implement a finite iterator.
	/// Param comparer: An invokable value that is called with two arguments. Each argument is a
	///          value from {first} and {second}, respectively. If the values match, the comparer
	///          returns a truthy value; otherwise, it may return a falsy value or throw an error.
	/// Param message: (optional) A message included in the assertion error message.
	/// Returns: True if the assertion succeeds.
	/// Throws AssertionError:
	///          The two collections do not match, or one collection is longer than the other.
	/// Remarks: The assertion succeeds if both collections are empty.
	///
	///          To test whether two collections contain the same values, you can do something
	///          like the following:
	///
	///          `Assert.collectionsMatch(first, second, Assert.areEqual);`
	///
	///          or:
	///
	///          `Assert.collectionsMatch(first, second, Assert.areSameRef);`
	///
	///          or even just:
	///
	///          `Assert.collectionsMatch(first, second, @==);`
	public static collectionsMatch(first, second, comparer, message = null)
	{
		var firstIter = first.iter;
		var secondIter = second.iter;

		while true {
			var firstHasMore = firstIter.moveNext();
			var secondHasMore = secondIter.moveNext();
			if firstHasMore != secondHasMore {
				throw new AssertionError(AssertionMessages.expectedSameLength(message));
			}

			// firstHasMore == secondHasMore here
			if not firstHasMore {
				break;
			}

			var match = comparer(firstIter.current, secondIter.current);
			if not match {
				throw new AssertionError(AssertionMessages.expectedCollectionMatch(
					firstIter.current,
					secondIter.current,
					message
				));
			}
		}

		return true;
	}
}
